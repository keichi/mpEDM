name: build

on:
 push:
    branches:
    - master
 pull_request:
    branches:
    - master

jobs:
  linux-gpu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y libopenmpi-dev libhdf5-openmpi-dev
    - name: Install ArrayFire
      run: |
        wget https://arrayfire.s3.amazonaws.com/3.6.4/ArrayFire-v3.6.4_Linux_x86_64.sh
        sudo sh ArrayFire-v3.6.4_Linux_x86_64.sh --prefix=/usr --exclude-subdir --skip-license
    - name: Add ArrayFire's install dir to ldconfig cache
      run: sudo ldconfig /usr/lib64
    - name: Run cmake
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DUSE_BOOST=OFF ..
    - name: Run make
      run: make -j $(nproc)
      working-directory: build
    - name: Run ctest
      run: ctest
      working-directory: build

  linux-cpu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y libopenmpi-dev libhdf5-openmpi-dev
    - name: Run cmake
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DUSE_BOOST=OFF ..
    - name: Run make
      run: make -j $(nproc)
      working-directory: build
    - name: Run ctest
      run: ctest
      working-directory: build

  macos-cpu:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Install dependencies
      run: brew install hdf5
    - name: Run cmake
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DUSE_BOOST=OFF ..
    - name: Run make
      run: make -j $(sysctl -n hw.physicalcpu_max)
      working-directory: build
    - name: Run ctest
      run: ctest
      working-directory: build

  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run clang-format
      run: ./scripts/run-clang-format.py -r src --clang-format-executable $(which clang-format-8)

  cppcheck:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install cppcheck
      run: brew install cppcheck
    - name: Run cppcheck
      run: cppcheck --enable=all --inline-suppr -i src/thirdparty --error-exitcode=1 src
